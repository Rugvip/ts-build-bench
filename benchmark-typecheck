#!/usr/bin/env node

const { createProjectMatrix, presets } = require('./factory');
const { processRunner } = require('./runner');
const { printTimingSummary } = require('./stats');

processRunner({
  matrix: createProjectMatrix({
    baseConfig: presets.baseConfig({
      packages: Array(100).fill(presets.packages.balanced(20)),
    }),
    dimensions: [
      {
        topInc: {
          lintStrategy: 'top',
          projectReferences: 'incremental',
        },
        allRefs: {
          lintStrategy: 'all',
          projectReferences: 'enabled',
        },
        topRefs: {
          lintStrategy: 'top-references',
          projectReferences: 'enabled',
        },
      },
    ],
  }),
  prepare: async (runner) => {},
  benchmark: async (runner, count) => {
    const timings1 = await runner.time(
      count,
      async (runner) => {
        await runner.runCmd('.', ['yarn', 'lint']);
      },
      async (runner, isLastRun) => {
        if (!isLastRun) {
          if (runner.project.dir.includes('topInc')) {
            await runner.runCmd('.', ['rm', '-r', 'types-cache']);
          } else {
            await runner.runCmd('.', ['yarn', 'clean']);
          }
        }
      }
    );
    console.log('*** FIRST BUILD LINT TIMES  ***');
    printTimingSummary(timings1);

    const timings2 = await runner.timeCmd({ cmd: ['yarn', 'lint'], count });
    console.log('*** NO-CHANGES LINT TIMES ***');
    printTimingSummary(timings2);

    const timings4 = await runner.time(count, async (runner) => {
      runner.runCmd('packages/pkg1/src/components/component-1', [
        'sed',
        '-i',
        '""',
        's/a\\?/x\\?/',
        'Component.tsx',
      ]);
      await runner.runCmd('.', ['yarn', 'lint'], { expectFail: true });
      runner.runCmd('packages/pkg1/src/components/component-1', [
        'sed',
        '-i',
        '""',
        's/x\\?/a\\?/',
        'Component.tsx',
      ]);
      await runner.runCmd('.', ['yarn', 'lint']);
    });
    console.log('*** SINGLE-CHANGE LINT TIMES ***');
    printTimingSummary(timings4);
  },
});
